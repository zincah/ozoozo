<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="SellerSalesDAO">
	
	<!-- 매출 리스트 -->
	<select id="selectSalesList" resultType="product">
		SELECT	#{sales_date} AS sales_date,
				SUM(p.payment_total) AS sales_paymentTotal,
				(SELECT COUNT(*) FROM user_order uo WHERE DATE(uo.order_date) = #{sales_date}) AS sales_paymentTotalNum,
				SUM(CASE WHEN p.payment_total<![CDATA[<]]>0 THEN p.payment_total ELSE 0 END) AS sales_canclePaymentTotal,
				(SELECT COUNT(*) FROM user_order uo WHERE DATE(uo.order_date) = #{sales_date} AND uo.payment <![CDATA[<]]> 0) AS sales_canclePaymentTotalNum,
				SUM(CASE WHEN p.payment_total<![CDATA[>=]]>0 THEN p.payment_total ELSE 0 END) AS sales_submitPaymentTotal,
				(SELECT COUNT(*) FROM user_order uo WHERE DATE(uo.order_date) = #{sales_date} AND uo.payment <![CDATA[>]]> 0) AS sales_submitPaymentTotalNum,
				SUM(CASE WHEN p.py_discount=null THEN p.py_discount ELSE 0 END) AS sales_discount,
				SUM(uo.shipping_fee) AS sales_shippingFee,
				SUM(p.py_final) AS sales_final
		FROM 	user_order uo
		JOIN 	payment p ON p.py_orderid = uo.order_id 
		WHERE 	DATE(uo.order_date) = #{sales_date} AND uo.seller_id = #{seller_id};
	</select>
	
	<!-- barChar/판매량 리스트 -->
	<select id="selectBarChartTotalList" resultType="product">
		SELECT	p.product_id, p.product_title
				, COUNT(uo.product_id) sales_count
		FROM 	product p 
				LEFT OUTER JOIN user_order uo 
				ON uo.product_id = p.product_id
		WHERE	uo.order_date BETWEEN TO_DATE(#{sales_startDate}, 'YYYY-MM-DD') AND TO_DATE(#{sales_endDate}, 'YYYY-MM-DD') + INTERVAL '1 DAY'
				AND p.seller_id = #{seller_id}
		GROUP BY p.product_id, p.product_title
		ORDER BY sales_count DESC
		LIMIT 5;
	</select>
	
	<!-- 해당 날짜 주문건 리스트 -->
	<select id="selectSalesDetailList" resultType="product">
		SELECT 	uo.order_date, uo.order_id, uo.order_num
				, p.payment_way, p.payment_total, uo.quantity
				, p.py_discount, uo.shipping_fee, p.py_final
		FROM	user_order uo 
				JOIN payment p 
				ON p.py_orderid = uo.order_id
		WHERE	uo.order_date BETWEEN TO_DATE(#{sales_dateString}, 'YYYY-MM-DD') AND TO_DATE(#{sales_dateString}, 'YYYY-MM-DD') + INTERVAL '1 DAY'
				AND uo.seller_id = #{seller_id}
		ORDER BY uo.order_date DESC;
	</select>
</mapper>

