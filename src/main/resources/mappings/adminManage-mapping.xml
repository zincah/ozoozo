<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="AdminManageDAO">


	<!-- 현재 사용하는거 회원관리, 총 검색, 회원정보 수정 -->
	<!-- 공지사항 관리 -->
	<select id="noticeCount" resultType="int">
		select count(*) from cscenter;
	</select>
	
	<!-- 활동업체 관리 -->
	<select id="sellerCount" resultType="int">
		select count(seller_id) from seller where seller_status='입점중';
	</select>
	
	<!-- 유동인구 관리 -->
	<select id="floatingPopulation" resultType="user">
		SELECT COUNT(lc_usernum), login_date FROM logincount GROUP BY login_date ORDER BY login_date DESC
		LIMIT 7 OFFSET 0 * 7
	</select>
	
	<!-- best 상품 관리 -->
	<select id="bestProductOfIndex" resultType="HashMap">
		select (ROW_NUMBER() over(order by sum(payment) desc)) AS ROWNUM, od_postid, sum(payment) as total
		from user_order group by od_postid order by total desc fetch first 30 row only;
	</select>
	
	<!-- 인덱스 페이지 : 등록 요청 -->
	<select id="registrationWait" resultType="int">
		SELECT COUNT(*) FROM product_posting WHERE post_status='승인대기';
	</select>
	
	<!-- 인덱스 페이지 : 등록 보류 -->
	<select id="registrationHold" resultType="int">
		SELECT COUNT(*) FROM product_posting WHERE post_status='보류중';
	</select>

	<!-- 회원관리 -->
	<select id="selectUser" resultType="user">
		SELECT user_num, user_email, nickname, gender, reccode, last_login, join_date, user_status, user_type FROM user_table ORDER BY user_num DESC;
	</select>

	<!-- 회원관리 : 회원상태 변경 -->
	<update id="updateUserStatus" parameterType="user">
		UPDATE user_table SET user_status=#{user_status} WHERE user_num = #{user_num};
	</update>
	
	<!-- 실시간 검색 -->
	<select id="useSearchBox" parameterType="user" resultType="user">
		SELECT user_num, user_email, nickname, gender, reccode, last_login, join_date, user_status, user_type FROM user_table 
		<where>
			<if test="pack=='nickname'.toString()">
				nickname LIKE '%'||#{keyword}||'%' ORDER BY user_num DESC
			</if>
			<if test="pack=='email'.toString()">
				user_email LIKE '%'||#{keyword}||'%' ORDER BY user_num DESC
			</if>
		</where>
	</select>
	
	<!-- 회원관리 : 검색 조건,페이지 포함 회원 리스트 -->
	<select id="getUserList" parameterType="user" resultType="user">
		SELECT user_num, user_email, nickname, gender, reccode, last_login, join_date, user_status, user_type FROM user_table 
		<where>
			<if test="user_type != '' and user_type != null">
				user_type = #{user_type}
			</if>
			<if test="user_status != '' and user_status != null">
				<trim prefix="and">
					user_status = #{user_status}
				</trim>
			</if>
			<if test="enddate != null and startdate != null">
				<trim prefix="and">
					join_date BETWEEN #{startdate} AND #{enddate}
				</trim>
			</if>
			<if test="pack != null and pack != ''">
				<trim prefix="and">
					<if test="pack=='nickname'.toString()">
						nickname LIKE '%'||#{keyword}||'%'
					</if>
					<if test="pack=='email'.toString()">
						user_email LIKE '%'||#{keyword}||'%'
					</if>
				</trim>
			</if>
		</where>
		<trim prefix="order by">
			user_num DESC limit #{cri.amount} offset (#{cri.pageNum}-1) * #{cri.amount}
		</trim>
	</select>
	
	<!-- 회원관리 : 검색 조건 포함 회원 total count -->
	<select id="getUserListCount" parameterType="user" resultType="user">
		SELECT user_num, user_email, nickname, gender, reccode, last_login, join_date, user_status, user_type FROM user_table 
		<where>
			<if test="user_type != '' and user_type != null">
				user_type = #{user_type}
			</if>
			<if test="user_status != '' and user_status != null">
				<trim prefix="and">
					user_status = #{user_status}
				</trim>
			</if>
			<if test="enddate != null and startdate != null">
				<trim prefix="and">
					join_date BETWEEN #{startdate} AND #{enddate}
				</trim>
			</if>
			<if test="pack != null and pack != ''">
				<trim prefix="and">
					<if test="pack=='nickname'.toString()">
						nickname LIKE '%'||#{keyword}||'%'
					</if>
					<if test="pack=='email'.toString()">
						user_email LIKE '%'||#{keyword}||'%'
					</if>
				</trim>
			</if>
		</where>
	</select>
	
	
	<!-- admin 상품 상태 바꾸기 : product-posting -->
	<update id="updateProductStatus1">
		UPDATE product_posting SET post_status=#{post_status} WHERE post_id=#{post_id};
	</update>
	
	<!-- admin 상품 상태 바꾸기 : product-status -->
	<update id="updateProductStatus2">
		UPDATE product_status AS pos SET status=#{post_status} FROM product AS pp WHERE pos.st_product_id = pp.product_id AND pp.product_postid=#{post_id};
	</update>
	
	<!-- admin 상품에서 쿠폰 검색 -->
	<select id="selectCouponList" resultType="adminproduct">
		SELECT coupon_id, coupon_title, coupon_subtitle FROM product_coupon WHERE coupon_status = '사용중';
	</select>
	
	<!-- admin 쿠폰 상태 바꾸기 : coupon-status -->
	<update id="updateCouponStatus">
		UPDATE product_posting SET post_couponid=#{post_couponid} WHERE post_id=#{post_id};
	</update>
	
	<!-- admin deal 상태 바꾸기 : deal-info, post -->
	<update id="updateDealStatus">
		UPDATE deal_info SET deal_status=#{deal_status}, deal_time=now(), deal_endtime=now()+'1 days' WHERE deal_postid=#{post_id} and deal_status = '신청';
	</update>
	
	<update id="updateDealStatusOnPost">
		UPDATE product_posting SET today_deal=#{today_deal} WHERE post_id=#{post_id};
	</update>
	<!-- update join 되는지 확인해보기 -->
	
	<delete id="deleteDeal">
		UPDATE deal_info SET deal_status#{중지} WHERE deal_postid=#{post_id}
	</delete>

	
	<!-- 총 검색 -->
	<select id="getProductList" parameterType="adminproduct" resultType="adminproduct">
		SELECT po.post_id as post_id, ss.company_name as company_name, di.deal_status as deal_status, po.best_product as best_product, po.post_name as post_name, pp.product_created as product_created, pp.product_count as product_count, ca.cate_name as cate_name, sc.subcate_name as subcate_name, po.post_status as post_status, po.post_couponid as post_couponid, pc.coupon_title as coupon_title
		FROM product_posting po INNER JOIN (
			SELECT MAX(product_created) AS product_created , count(product_postid) AS product_count, product_postid FROM product GROUP BY product_postid 
		) pp ON po.post_id = pp.product_postid
		INNER JOIN seller ss ON po.post_sellerid = ss.seller_id 
		INNER JOIN category ca ON po.po_category = ca.cate_code
		INNER JOIN sub_category sc ON po.po_subcate = sc.subcate_code
		LEFT OUTER JOIN product_coupon pc ON po.post_couponid = pc.coupon_id 
		LEFT OUTER JOIN deal_info di ON po.post_id = di.deal_postid
		<where>
			<if test="post_status != '' and post_status != null">
				post_status = #{post_status}
			</if>
			<if test="deal_status != '' and deal_status != null">
				<trim prefix="and">
				deal_status = #{deal_status}
				</trim>
			</if>
			<if test="cate_name != '' and cate_name != null">
				<trim prefix="and">
					cate_name = #{cate_name}
				</trim>
			</if>
			<if test="enddate != null and startdate != null">
				<trim prefix="and">
					product_created BETWEEN #{startdate} AND #{enddate}
				</trim>
			</if>
			<if test="pack != '' and pack != null">
				<trim prefix="and">
					<if test="pack=='company_name'.toString()">
						company_name LIKE '%'||#{keyword}||'%'
					</if>
					<if test="pack=='post_name'.toString()">
						post_name LIKE '%'||#{keyword}||'%'
					</if>
					<if test="pack=='subcate_name'.toString()">
						subcate_name LIKE '%'||#{keyword}||'%'
					</if>
				</trim>
			</if>
		</where>
		<trim prefix="order by">
			post_id DESC limit #{cri.amount} offset (#{cri.pageNum}-1) * #{cri.amount}
		</trim>
	</select>
	
	<!-- 총 검색 count -->
	<select id="searchListCount" resultType="int">
		SELECT count(po.post_id)
		FROM product_posting po INNER JOIN (
			SELECT MAX(product_created) AS product_created , count(product_postid) AS product_count, product_postid FROM product GROUP BY product_postid 
		) pp ON po.post_id = pp.product_postid
		INNER JOIN seller ss ON po.post_sellerid = ss.seller_id 
		INNER JOIN category ca ON po.po_category = ca.cate_code
		INNER JOIN sub_category sc ON po.po_subcate = sc.subcate_code
		LEFT OUTER JOIN product_coupon pc ON po.post_couponid = pc.coupon_id 
		LEFT OUTER JOIN deal_info di ON po.post_id = di.deal_postid
		<where>
			<if test="post_status != '' and post_status != null">
				post_status = #{post_status}
			</if>
			<if test="deal_status != '' and deal_status != null">
				<trim prefix="and">
				deal_status = #{deal_status}
				</trim>
			</if>
			<if test="cate_name != '' and cate_name != null">
				<trim prefix="and">
					cate_name = #{cate_name}
				</trim>
			</if>
			<if test="enddate != null and startdate != null">
				<trim prefix="and">
					product_created BETWEEN #{startdate} AND #{enddate}
				</trim>
			</if>
			<if test="pack != '' and pack != null">
				<trim prefix="and">
					<if test="pack=='company_name'.toString()">
						company_name LIKE '%'||#{keyword}||'%'
					</if>
					<if test="pack=='post_name'.toString()">
						post_name LIKE '%'||#{keyword}||'%'
					</if>
					<if test="pack=='subcate_name'.toString()">
						subcate_name LIKE '%'||#{keyword}||'%'
					</if>
				</trim>
			</if>
		</where>
	</select>
	
	<!-- 업체 관리 : 요청 받은 업체 정보 -->
	<select id="getSellerInfo" resultType="seller">
		SELECT * FROM seller WHERE seller_id=#{seller_id};
	</select>
	
	<!-- 업체 관리 : 업체 상태 변경 -->
	<update id="sellerStatusUpdate" parameterType="seller">
		UPDATE seller SET seller_status=#{seller_status} 
		<where>
			seller_id IN 
			<foreach item="item" collection="sellerList" index="index" open="(" close=")" separator=",">
				#{item}
			</foreach>
		</where> 
	</update>
	
	<!-- 업체 관리 : 업체 리스트 -->
	<select id="selectSellerList" resultType="seller">
		select s1.*, s2.sid_text, pp.brandstar from seller s1
		inner join (select seller_id::text sid_text, seller_id from seller) s2 on s1.seller_id = s2.seller_id 
		inner join (select sum(star_ratio)/count(post_id) as brandstar, post_sellerid from product_posting where star_ratio > 0 group by post_sellerid) pp
		on pp.post_sellerid = s1.seller_id
		<where>
			<if test="keyword != '' and keyword != null">
				s2.sid_text like '%'||#{keyword}||'%'
				<trim prefix="or">
				s1.company_name like '%'||#{keyword}||'%'
				</trim>
				<trim prefix="or">
				s1.representative like '%'||#{keyword}||'%'
				</trim>
			</if>
			<if test="seller_status != '' and seller_status != null">
				<trim prefix="and">
					s1.seller_status = #{seller_status}
				</trim>
			</if>
		</where>
	</select>
	
	<!-- 매출 -->
	<!-- today deal -->
	<select id="todayDealSale" resultType="adminproduct">
	select make.post_id, make.company_name, make.post_name, make.cate_name, make.payment, make.quantity,
	make.deal_time, make.deal_endtime, make.deal_status from (
	select pp.post_id as post_id
	      , s.company_name as company_name
	      , pp.post_name as post_name
	      , c.cate_name as cate_name
	      , SUM(case when uo.order_date between di.deal_time and di.deal_endtime then payment else 0 end) as payment
	      , SUM(case when uo.order_date between di.deal_time and di.deal_endtime then quantity else 0 end) as quantity
	      , di.deal_time as deal_time
	      , di.deal_endtime as deal_endtime
	      , di.deal_status as deal_status
	      from product_posting pp
	      join seller s on s.seller_id = pp.post_sellerid   
	      join category c on c.cate_code = pp.po_category
	      join deal_info di on di.deal_postid = pp.post_id
	      join user_order uo on uo.od_postid = pp.post_id
	group by pp.post_id, s.company_name, c.cate_name, di.deal_time, di.deal_endtime, di.deal_status
	order by di.deal_time desc) make
	<where>
		payment > 0 and deal_time BETWEEN #{startdate} AND #{enddate}		
		<if test="keyword != '' and keyword != null">
			<trim prefix="and">
			company_name like '%'||#{keyword}||'%'
				<trim prefix="or">
				post_name like '%'||#{keyword}||'%'
				</trim>
			</trim>
		</if>
	</where>
	ORDER BY deal_time DESC;
	</select>
	
	<!-- 업체별 매출 -->
	<select id="sellerSale" resultType="adminproduct">
	SELECT s.*, sale.quantity, sale.payment FROM seller s
	INNER JOIN (
		SELECT SUM(quantity) AS quantity, SUM(payment) AS payment, seller_id AS sid FROM user_order 
		WHERE order_date BETWEEN #{startdate} AND #{enddate}
		GROUP BY seller_id
	) sale ON s.seller_id = sale.sid
	<where>
	<if test="keyword != '' and keyword != null">
		s.company_name like '%'||#{keyword}||'%'
	</if>
	</where>
	</select>
	
	<!-- best30 매출 -->
	<select id="bestSale" resultType="adminproduct">
		SELECT po.post_id, s.company_name, po.post_name, c.cate_name, po.whole_price, po.sale_ratio, 
		best.quantity, best.payment, best.cnt, po.post_created, po.today_deal FROM product_posting po
		INNER JOIN (
		SELECT COUNT(od_postid) AS cnt, SUM(quantity) AS quantity, SUM(payment) AS payment, od_postid AS bestid
		FROM user_order GROUP BY od_postid fetch first 30 row only
		) best ON po.post_id = best.bestid
		INNER JOIN category c ON po.po_category = c.cate_code
		INNER JOIN seller s ON po.post_sellerid = s.seller_id
		<where>
		<if test="keyword != '' and keyword != null">
			s.company_name like '%'||#{keyword}||'%'
			<trim prefix="or">
			po.post_name like '%'||#{keyword}||'%'
			</trim>
		</if>
		</where>
		<trim prefix="order by">
			best.cnt DESC limit #{cri.amount} offset (#{cri.pageNum}-1) * #{cri.amount}
		</trim>
	</select>
	
	<!-- best30 매출 total count -->
	<select id="bestSaleCount" resultType="adminproduct">
		SELECT po.post_id, s.company_name, po.post_name, c.cate_name, po.whole_price, po.sale_ratio, 
		best.quantity, best.payment, best.cnt, po.post_created, po.today_deal FROM product_posting po
		INNER JOIN (
		SELECT COUNT(od_postid) AS cnt, SUM(quantity) AS quantity, SUM(payment) AS payment, od_postid AS bestid
		FROM user_order GROUP BY od_postid fetch first 30 row only
		) best ON po.post_id = best.bestid
		INNER JOIN category c ON po.po_category = c.cate_code
		INNER JOIN seller s ON po.post_sellerid = s.seller_id
		<where>
		<if test="keyword != '' and keyword != null">
			s.company_name like '%'||#{keyword}||'%'
			<trim prefix="or">
			po.post_name like '%'||#{keyword}||'%'
			</trim>
		</if>
		</where>
	</select>
	
	
	<!-- postinfo 관련 -->
	<!-- 첫번째 정보 가져오기 -->
	<select id="postInfo1" resultType="HashMap">
		select p.*, pp.*, po.*, s.seller_id, s.company_name, s.representative, sc.subcate_name as sub2, sc2.subcate_name as sub1
		from product p
		left outer join product_posting pp on p.product_postid = pp.post_id
		inner join product_option po on p.product_id = po.op_productid 
		inner join seller s on s.seller_id = pp.post_sellerid
		inner join sub_category sc on pp.po_subcate = sc.subcate_code
		inner join sub_category sc2 on (pp.po_subcate/100*100) = sc2.subcate_code
		where pp.post_id=#{postid};
	</select>
	
	<!-- option 가져오기 -->
	<select id="postInfo2" resultType="int">
		select detail_value from product_details where dprodetails_postid=#{postid};
	</select>
	
	<!-- table 가져오기 -->
	<select id="postInfo3" resultType="productdetail">
		select * from product_tables where protable_postid=#{postid};
	</select>	
	
	<!-- 사진 링크 가져오기 -->
	<select id="postInfo4" resultType="HashMap">
		select * from product_image where photo_postid=#{postid};
	</select>
</mapper>