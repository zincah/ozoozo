<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="UserMainDAO">

	<!-- main화면에 상품 뿌리기 -->
   <select id="mainProductList" resultType="userproduct">
     SELECT po.post_id, po.post_status, po.star_ratio, po.post_name, po.whole_price*(1-po.sale_ratio/100.0) as sale_price, po.sale_ratio, 
     po.whole_price, po.shipping_info1, po.po_category, po.po_subcate, s.company_name, pimg.photo_url, od.payment, scount, rcount,
     di.deal_saleratio, di.deal_saleprice, di.deal_status
      FROM product_posting po INNER JOIN seller s ON po.post_sellerid = s.seller_id
      INNER JOIN (
         SELECT photo_id, photo_postid, photo_url FROM product_image 
         WHERE (photo_id, photo_postid) 
         IN (
            SELECT MIN(photo_id) AS photo_id, photo_postid
            FROM product_image 
            GROUP BY photo_postid 
         )
      ) pimg ON po.post_id = pimg.photo_postid
	  left outer join (select od_postid, sum(payment) as payment from user_order group by od_postid) od on po.post_id = od.od_postid
	  left outer join (select count(sc_postid) as scount, sc_postid from user_scrap group by sc_postid) sc on po.post_id = sc_postid
	  left outer join (select count(review_id) as rcount, repost_id from review group by repost_id) r on po.post_id = r.repost_id
	  left outer join (select * from deal_info where deal_status='게시') di on di.deal_postid = po.post_id 
      WHERE po.post_status='판매중'
      <if test="orderKind == 'latestRanking' or orderKind == null">
      	order by po.post_id desc
      </if>
      <if test="orderKind == 'saleRanking'">
      	order by od.payment is null asc, od.payment desc
      </if>
      <if test="orderKind == 'popularRanking'">
      	order by scount is null asc, scount desc
      </if>
      <if test="orderKind == 'reviewRanking'">
      	order by rcount is null asc, rcount desc
      </if>
      <if test="orderKind == 'highpriceRanking'">
      	order by sale_price desc
      </if>
      <if test="orderKind == 'rowpriceRanking'">
      	order by sale_price
      </if>
      limit 12 offset 0 * 12;
   </select>
   
   <select id="mainDealProductList" resultType="userproduct">
      SELECT po.post_id, po.star_ratio, po.post_name, po.whole_price, di.deal_saleratio, di.deal_saleprice, 
      po.shipping_info1, po.po_category, po.po_subcate, s.company_name, pimg.photo_url 
      FROM (SELECT * FROM product_posting WHERE today_deal=true) po INNER JOIN seller s ON po.post_sellerid = s.seller_id
      INNER JOIN (
         SELECT photo_id, photo_postid, photo_url FROM product_image 
         WHERE (photo_id, photo_postid) 
         IN (
            SELECT MIN(photo_id) AS photo_id, photo_postid
            FROM product_image 
            GROUP BY photo_postid 
         )
      ) pimg ON po.post_id = pimg.photo_postid
      INNER JOIN (
         SELECT * FROM deal_info WHERE deal_status='게시'
      ) di ON po.post_id = di.deal_postid 
      ORDER BY di.deal_id DESC FETCH FIRST 4 ROWS ONLY;
   </select>
   
   <!-- main화면에 상품 뿌리기 -->
   <select id="plusProductList" resultType="userproduct">
      SELECT po.post_id, po.post_status, po.star_ratio, po.post_name, po.whole_price*(1-po.sale_ratio/100.0) as sale_price, po.sale_ratio, 
     po.whole_price, po.shipping_info1, po.po_category, po.po_subcate, s.company_name, pimg.photo_url, od.payment, scount, rcount,
     di.deal_saleratio, di.deal_saleprice, di.deal_status
      FROM product_posting po INNER JOIN seller s ON po.post_sellerid = s.seller_id
      INNER JOIN (
         SELECT photo_id, photo_postid, photo_url FROM product_image 
         WHERE (photo_id, photo_postid) 
         IN (
            SELECT MIN(photo_id) AS photo_id, photo_postid
            FROM product_image 
            GROUP BY photo_postid 
         )
      ) pimg ON po.post_id = pimg.photo_postid
	  left outer join (select od_postid, sum(payment) as payment from user_order group by od_postid) od on po.post_id = od.od_postid
	  left outer join (select count(sc_postid) as scount, sc_postid from user_scrap group by sc_postid) sc on po.post_id = sc_postid
	  left outer join (select count(review_id) as rcount, repost_id from review group by repost_id) r on po.post_id = r.repost_id
	  left outer join (select * from deal_info where deal_status='게시') di on di.deal_postid = po.post_id 
      WHERE po.post_status='판매중'
      <if test="orderKind == 'latestRanking' or orderKind == null">
      	order by po.post_id desc
      </if>
      <if test="orderKind == 'saleRanking'">
      	order by od.payment is null asc, od.payment desc
      </if>
      <if test="orderKind == 'popularRanking'">
      	order by scount is null asc, scount desc
      </if>
      <if test="orderKind == 'reviewRanking'">
      	order by rcount is null asc, rcount desc
      </if>
      <if test="orderKind == 'highpriceRanking'">
      	order by sale_price desc
      </if>
      <if test="orderKind == 'rowpriceRanking'">
      	order by sale_price
      </if>
      limit 12 offset #{thispage} * 12;
   </select>
   
   <!-- 총 개수 구하기 -->
   <select id="getProductCount" resultType="int">
   		SELECT COUNT(*) FROM product_posting WHERE post_status='판매중';
   </select>
   
   <!-- banner 화면에 뿌리기 -->
   <select id="selectBannerList" resultType="banner">
      SELECT banner_id, banner_urlbig, banner_urlsm FROM banner;
   </select>

	<!-- dealtimer -->
	<select id="getDealEndTime" resultType="HashMap">
		select deal_postid, deal_endtime from deal_info where deal_status = '게시'
		order by deal_id desc fetch first 4 rows only;
	</select>


</mapper>