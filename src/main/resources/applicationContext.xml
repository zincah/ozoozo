<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">


	<!-- html,css,js 등등 파일 위치 정리 -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
	<!-- 쿼츠 적용할 패키지 빈 등록 -->
	<context:component-scan base-package="ozo.spring.house.server"></context:component-scan>

	<!-- aop annotation -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<!-- database -->
	<context:property-placeholder
		location="classpath:config/awsdb.properties" />
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName"
			value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
	</bean>

	 <!-- sqlsession 의존성 주입 -->
	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<!-- 암호화 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

	<!-- file upload -->
	<bean id="multipartResolver" 
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="200000000" />
    	<property name="maxInMemorySize" value="200000000" />
        <property name="defaultEncoding" value="utf-8"/>
	</bean>
	
	<!-- 쿼츠 설정  -->
	<bean id="serverJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
	    <property name="targetObject" ref="serverService" />
	    <!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
	    <property name="targetMethod" value="serverQuartz" />
	    <!-- 동시 실행을 방지합니다. -->
	    <property name="concurrent" value="false" />
	</bean>
	<!-- 쿼츠 트리거 -->
	<bean id="serverJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="serverJob" />
	    <!-- CronTrigger를 사용하여 2분 간격으로 실행되도록 지정했습니다. -->
	    <property name="cronExpression" value="0/1 * * * * ?" />
	</bean>
	<!-- 쿼츠 스케줄러 -->
	<bean id="serverJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	        <!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
	        <list><ref bean="serverJobTrigger" /></list>
	    </property>
	</bean>
</beans>
